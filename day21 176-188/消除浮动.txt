1.为什么要消除浮动？
    由于父级盒子很多情况下，不方便给定高度，但是子盒子浮动又不占有位置，最后父级盒子高度为0时，就会影响下面的标准流盒子。
    由于浮动元素不在占用原文档流的位置，所以它会对后面的元素排版产生影响。
2.清除浮动的本质
    清除浮动的本质是清除浮动元素造成的影响；
    如果父盒子本身有高度，则不需要清除浮动；
    清除浮动之后，父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了。
3.语法
    选择器 { clear：属性值;}
    left    不允许左侧有浮动元素（清除左侧浮动元素的影响）
    right   不允许右侧有浮动元素（清除右侧浮动元素的影响）
    both    同时清除左右两侧浮动的影响
    实际操作中几乎只用claer:both;
        清除浮动的策略是闭合浮动(只让浮动在父盒子内部影响，不影响父盒子外面的其他盒子)。
4.清除浮动方法
    1.额外标签法，也称为隔墙法，是W3C推荐的做法。
        额外标签法就是在最后一个浮动的子元素后面添加一个额外标签，添加清除浮动样式。
        例如<div style="clear:both"></div>或者其他标签（如<br/等>）。
        优点：通俗易懂，书写方便
        缺点：添加许多无意义的标签，结构化较差
        注意！！！！要求这个新添加的空标签必须是块级元素。
        <style>
            .clear {
                    clear: both;
            }
        </style>
        <div class="clear"></div>

    2.父级添加overflow属性
        可以给父级添加overflow属性，将属性值设置为hidden、auto、或scroll。
        子不教父之过，注意是给父元素添加代码。
        优点：代码简洁
        缺点：无法显示溢出的部分
    3.父级添加after元素
    :after 方式是额外标签法的升级版。也是给父元素添加
    :after 即给最后一个浮动元素末尾添加一个伪元素防止发生浮动混乱。
        .clearfix:after {
            content: "";
            display: block;
            height: 0;
            clear: both;
            visibility: hidden;
        }

        .clearfix {
            /* IE6、7专有 */
            *zoom: 1;
        }
        之后给父元素调用clearfix即可   <div class="box clearfix"></div>
        优点：没有增加标签，结构更简单
        缺点：要照顾低版本浏览器
        代表：网易、京东
    4.父级添加双伪元素
        双伪元素：:before,:after即给首浮动元素前，末浮动元素后各添加一个伪元素防止发生浮动混乱。
        .clearfix:before,
        .clearfix:after {
            content: "";
            display: table;
        }

        .clearfix:after {
            clear: both;
        }

        .clearfix {
            *zoom: 1;
        }

        .clearfix {
            /* IE6、7专有 */
            *zoom: 1;
        }
        优点：代码更简洁
        缺点：要照顾低版本浏览器
        代表：小米、腾讯
